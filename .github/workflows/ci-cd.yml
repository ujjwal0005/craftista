name: Craftista CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'helm/**'
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
  SONAR_HOST: https://sonarcloud.io
  SONAR_ORG: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT: ${{ secrets.SONAR_PROJECT_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Frontend
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm install
    
    - name: Build Catalogue
      if: matrix.service == 'catalogue'
      run: |
        cd catalogue
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Recommendation
      if: matrix.service == 'recommendation'
      run: |
        cd recommendation
        go mod tidy
        go build
    
    - name: Build Voting
      if: matrix.service == 'voting'
      run: |
        cd voting
        mvn clean install -DskipTests

  unit-test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [catalogue]
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Catalogue
      if: matrix.service == 'catalogue'
      run: |
        cd catalogue
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m pytest test_app.py -v --cov=. --cov-report=xml
    

  sonar-analysis:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Build Java classes
      run: |
        cd voting
        mvn clean compile test-compile
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Get SonarCloud metrics and send to Slack
      run: |
        sleep 30
        
        METRICS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ env.SONAR_HOST }}/api/measures/component?component=${{ env.SONAR_PROJECT }}&metricKeys=bugs,vulnerabilities,code_smells,coverage")
        
        BUGS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"')
        VULNERABILITIES=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"')
        CODE_SMELLS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"')
        COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        
        if [ "$BUGS" -gt 0 ] || [ "$VULNERABILITIES" -gt 0 ]; then
          COLOR="danger"
        elif [ "$CODE_SMELLS" -gt 10 ]; then
          COLOR="warning"
        else
          COLOR="good"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"üìä SonarCloud Analysis Complete\",
          \"attachments\": [{
            \"color\": \"$COLOR\",
            \"fields\": [{
              \"title\": \"üêõ Bugs\",
              \"value\": \"$BUGS\",
              \"short\": true
            }, {
              \"title\": \"üîí Vulnerabilities\",
              \"value\": \"$VULNERABILITIES\",
              \"short\": true
            }, {
              \"title\": \"üí® Code Smells\",
              \"value\": \"$CODE_SMELLS\",
              \"short\": true
            }, {
              \"title\": \"üìà Coverage\",
              \"value\": \"$COVERAGE%\",
              \"short\": true
            }, {
              \"title\": \"üìã View Details\",
              \"value\": \"<${{ env.SONAR_HOST }}/dashboard?id=${{ env.SONAR_PROJECT }}|SonarCloud Dashboard>\",
              \"short\": false
            }]
          }]
        }" \
        ${{ secrets.SLACK_WEBHOOK_URL }}

  owasp-dependency-check:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'craftista-${{ matrix.service }}'
        path: './${{ matrix.service }}'
        format: 'JSON'
        out: 'dependency-check-report'
      continue-on-error: true
    
    - name: Parse OWASP results and send to Slack
      run: |
        if [ -f "dependency-check-report/dependency-check-report.json" ]; then
          CRITICAL=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="CRITICAL")] | length' dependency-check-report/dependency-check-report.json || echo 0)
          HIGH=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="HIGH")] | length' dependency-check-report/dependency-check-report.json || echo 0)
          MEDIUM=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="MEDIUM")] | length' dependency-check-report/dependency-check-report.json || echo 0)
          LOW=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity=="LOW")] | length' dependency-check-report/dependency-check-report.json || echo 0)
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            COLOR="danger"
          elif [ "$MEDIUM" -gt 0 ]; then
            COLOR="warning"
          else
            COLOR="good"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üîí OWASP Dependency Check for ${{ matrix.service }}\",
            \"attachments\": [{
              \"color\": \"$COLOR\",
              \"fields\": [{
                \"title\": \"Service\",
                \"value\": \"${{ matrix.service }}\",
                \"short\": true
              }, {
                \"title\": \"üî¥ Critical\",
                \"value\": \"$CRITICAL\",
                \"short\": true
              }, {
                \"title\": \"üü† High\",
                \"value\": \"$HIGH\",
                \"short\": true
              }, {
                \"title\": \"üü° Medium\",
                \"value\": \"$MEDIUM\",
                \"short\": true
              }, {
                \"title\": \"üîµ Low\",
                \"value\": \"$LOW\",
                \"short\": true
              }]
            }]
          }" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

  docker-build:
    needs: owasp-dependency-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/craftista-${{ matrix.service }}:${{ github.sha }} ./${{ matrix.service }}
        docker push ${{ env.DOCKER_REGISTRY }}/craftista-${{ matrix.service }}:${{ github.sha }}

  trivy-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, catalogue, recommendation, voting]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/craftista-${{ matrix.service }}:${{ github.sha }}
        format: 'json'
        output: 'trivy-results-${{ matrix.service }}.json'
    
    - name: Parse Trivy results and send to Slack
      run: |
        CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results-${{ matrix.service }}.json || echo 0)
        HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results-${{ matrix.service }}.json || echo 0)
        MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results-${{ matrix.service }}.json || echo 0)
        LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results-${{ matrix.service }}.json || echo 0)
        
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
          COLOR="danger"
        elif [ "$MEDIUM" -gt 0 ]; then
          COLOR="warning"
        else
          COLOR="good"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"üîç Trivy Security Scan Results for ${{ matrix.service }}\",
          \"attachments\": [{
            \"color\": \"$COLOR\",
            \"fields\": [{
              \"title\": \"Service\",
              \"value\": \"${{ matrix.service }}\",
              \"short\": true
            }, {
              \"title\": \"Image\",
              \"value\": \"${{ env.DOCKER_REGISTRY }}/craftista-${{ matrix.service }}:${{ github.sha }}\",
              \"short\": true
            }, {
              \"title\": \"üî¥ Critical\",
              \"value\": \"$CRITICAL\",
              \"short\": true
            }, {
              \"title\": \"üü† High\",
              \"value\": \"$HIGH\",
              \"short\": true
            }, {
              \"title\": \"üü° Medium\",
              \"value\": \"$MEDIUM\",
              \"short\": true
            }, {
              \"title\": \"üîµ Low\",
              \"value\": \"$LOW\",
              \"short\": true
            }, {
              \"title\": \"üîç View Details\",
              \"value\": \"<https://github.com/${{ github.repository }}/security/code-scanning|GitHub Security Tab>\",
              \"short\": false
            }]
          }]
        }" \
        ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Convert JSON to SARIF and upload
      run: |
        # Convert JSON to SARIF format for GitHub upload
        trivy convert --format sarif --output trivy-results-${{ matrix.service }}.sarif trivy-results-${{ matrix.service }}.json
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  update-deployment:
    needs: trivy-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Helm Chart
      run: |
        # Update global registry and tag in same repo
        yq e -i '.global.registry = "${{ env.DOCKER_REGISTRY }}"' helm/craftista/values.yaml
        yq e -i '.global.repository = "craftista"' helm/craftista/values.yaml
        yq e -i '.global.tag = "${{ github.sha }}"' helm/craftista/values.yaml
        
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add helm/craftista/values.yaml
        git commit -m "Update image tag to ${{ github.sha }}"
        git push origin main